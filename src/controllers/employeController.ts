import { Response, NextFunction } from 'express';
import { AuthenticatedRequest } from '../types';
import pool from '../config/dbconfig';
import { RowDataPacket } from 'mysql2';
import {
    getAllEmployes,
    getEmployeByEmail,
    addEmploye,
    updateEmploye,
    deleteEmploye,
} from '../models/employeModel';

// üîç R√©cup√©rer tous les employ√©s (ADMIN uniquement)
export const getEmployes = async (req: AuthenticatedRequest, res: Response, next: NextFunction): Promise<void> => {
    try {
        if (!req.user) {
            res.status(401).json({ message: "‚õî Acc√®s non autoris√©." });
            return;
        }

        // Passer l'email de l'utilisateur pour v√©rifier ses permissions
        const employes = await getAllEmployes(req.user.employeMail);
        res.status(200).json(employes);
    } catch (error) {
        next(error);
    }
};


// üîç R√©cup√©rer un employ√© par son e-mail (LUI-M√äME OU ADMIN)
export const getEmploye = async (req: AuthenticatedRequest, res: Response, next: NextFunction): Promise<void> => {
    try {
        const { email } = req.params;

        if (!req.user || (!req.user.isAdmin && req.user.employeMail !== email)) {
            res.status(403).json({ message: "‚õî Acc√®s interdit. Vous ne pouvez voir que votre propre profil." });
            return;
        }

        const employe = await getEmployeByEmail(email);
        if (!employe) {
            res.status(404).json({ message: "‚ùå Employ√© non trouv√©." });
            return;
        }

        res.status(200).json(employe);
    } catch (error) {
        next(error);
    }
};

// ‚ûï Ajouter un nouvel employ√© (ADMIN uniquement)
export const createEmploye = async (req: AuthenticatedRequest, res: Response, next: NextFunction): Promise<void> => {
    try {
        if (!req.user || !req.user.isAdmin) {
            res.status(403).json({ message: "‚õî Acc√®s interdit. Seuls les administrateurs peuvent ajouter des employ√©s." });
            return;
        }

        const newEmploye = req.body;
        await addEmploye(newEmploye);
        res.status(201).json({ message: "‚úÖ Employ√© ajout√© avec succ√®s." });
    } catch (error) {
        next(error);
    }
};

// ‚úèÔ∏è Mettre √† jour un employ√© (ADMIN ou SOI-M√äME)
export const updateEmployeData = async (req: AuthenticatedRequest, res: Response, next: NextFunction): Promise<void> => {
    try {
        const { email } = req.params;

        if (!req.user || (!req.user.isAdmin && req.user.employeMail !== email)) {
            res.status(403).json({ message: "‚õî Acc√®s interdit. Vous ne pouvez modifier que votre propre profil." });
            return;
        }

        const updatedData = req.body;
        await updateEmploye(email, updatedData);
        res.status(200).json({ message: "‚úÖ Employ√© mis √† jour avec succ√®s." });
    } catch (error) {
        next(error);
    }
};

// ‚ùå Supprimer un employ√© (ADMIN uniquement)
export const deleteEmployeData = async (req: AuthenticatedRequest, res: Response, next: NextFunction): Promise<void> => {
    try {
        if (!req.user || !req.user.isAdmin) {
            res.status(403).json({ message: "‚õî Acc√®s interdit. Seuls les administrateurs peuvent supprimer des employ√©s." });
            return;
        }

        const { email } = req.params;
        await deleteEmploye(email);
        res.status(200).json({ message: "‚úÖ Employ√© supprim√© avec succ√®s." });
    } catch (error) {
        next(error);
    }
};

// üîÑ Affecter un employ√© √† une cat√©gorie (ADMIN uniquement)
export const affecterCategorie = async (req: AuthenticatedRequest, res: Response) => {
    try {
        if (!req.user || !req.user.isAdmin) {
            res.status(403).json({ message: "‚õî Acc√®s interdit. Seuls les administrateurs peuvent g√©rer les affectations." });
            return;
        }

        const { employeMail, categorieID } = req.body;
        await pool.query(
            'INSERT INTO affecter (employeMail, categorieID) VALUES (?, ?) ON DUPLICATE KEY UPDATE categorieID = categorieID',
            [employeMail, categorieID]
        );

        res.status(201).json({ message: "‚úÖ Employ√© affect√© √† la cat√©gorie." });
    } catch (error) {
        res.status(500).json({ message: "‚ùå Erreur serveur" });
    }
};

// üóëÔ∏è Supprimer une affectation employ√© -> cat√©gorie (ADMIN uniquement)
export const retirerCategorie = async (req: AuthenticatedRequest, res: Response) => {
    try {
        if (!req.user || !req.user.isAdmin) {
            res.status(403).json({ message: "‚õî Acc√®s interdit. Seuls les administrateurs peuvent g√©rer les affectations." });
            return;
        }

        const { employeMail, categorieID } = req.body;
        await pool.query('DELETE FROM affecter WHERE employeMail = ? AND categorieID = ?', [employeMail, categorieID]);

        res.status(200).json({ message: "‚úÖ Affectation supprim√©e." });
    } catch (error) {
        res.status(500).json({ message: "‚ùå Erreur serveur" });
    }
};

// üì© R√©cup√©rer les cat√©gories d'un employ√© (LUI-M√äME OU ADMIN)
export const getCategoriesByEmploye = async (req: AuthenticatedRequest, res: Response) => {
    try {
        const employeMail = req.params.employeMail;

        if (!req.user || (!req.user.isAdmin && req.user.employeMail !== employeMail)) {
            res.status(403).json({ message: "‚õî Acc√®s interdit. Vous ne pouvez voir que vos propres cat√©gories." });
            return;
        }

        const [rows] = await pool.query<RowDataPacket[]>(
            'SELECT categorieID FROM affecter WHERE employeMail = ?', 
            [employeMail]
        );

        if (!Array.isArray(rows)) {
            throw new Error("R√©sultat inattendu : la requ√™te ne retourne pas un tableau.");
        }

        res.status(200).json(rows.map(row => row.categorieID));
    } catch (error) {
        res.status(500).json({ message: "‚ùå Erreur serveur" });
    }
};
