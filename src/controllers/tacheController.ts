import { Response, NextFunction } from 'express';
import { RowDataPacket } from 'mysql2';
import pool from '../config/dbconfig';
import { AuthenticatedRequest } from '../types'; // ‚úÖ Import du type personnalis√©
import { getTacheById, getTachesByEmploye, addTache, deleteTache } from '../models/tacheModel';

// üîç R√©cup√©rer toutes les t√¢ches accessibles par un employ√©
export const getTaches = async (req: AuthenticatedRequest, res: Response, next: NextFunction): Promise<void> => {
    try {
        if (!req.user) {
            res.status(401).json({ message: "‚õî Acc√®s non autoris√©." });
            return;
        }

        const taches = await getTachesByEmploye(req.user.employeMail);
        res.status(200).json(taches);
    } catch (error) {
        next(error);
    }
};

// üîç R√©cup√©rer une t√¢che par ID (avec restriction d'acc√®s)
export const getTache = async (req: AuthenticatedRequest, res: Response, next: NextFunction): Promise<void> => {
    try {
        if (!req.user) {
            res.status(401).json({ message: "‚õî Acc√®s non autoris√©." });
            return;
        }

        const { id } = req.params;
        const tacheID = Number(id);

        if (isNaN(tacheID)) {
            res.status(400).json({ message: "‚ùå Id de t√¢che invalide." });
            return;
        }

        const tache = await getTacheById(req.user.employeMail, Number(id));
        if (!tache) {
            res.status(404).json({ message: "‚ùå T√¢che non trouv√©e ou acc√®s refus√©." });
            return;
        }

        res.status(200).json(tache);
    } catch (error) {
        next(error);
    }
};

// ‚ûï Ajouter une t√¢che (ADMIN uniquement pour les listes non personnelles)
export const createTache = async (req: AuthenticatedRequest, res: Response, next: NextFunction): Promise<void> => {
    try {
        if (!req.user) {
            res.status(401).json({ message: "‚õî Acc√®s non autoris√©." });
            return;
        }

        const { tacheLibelle, tacheEtatCompletion, tacheEcheance, tacheCreation, tacheMAJ, listeID } = req.body;
        const employeMail = req.user.employeMail;

        // V√©rifier si la liste est personnelle
        const [listCheck] = await pool.query<RowDataPacket[]>(
            'SELECT estPersonnel FROM liste WHERE listeID = ?',
            [listeID]
        );

        if (listCheck.length === 0) {
            res.status(404).json({ message: "‚ùå Liste introuvable." });
            return;
        }

        const estPersonnel = listCheck[0].estPersonnel;

        // Seuls les admins peuvent ajouter des t√¢ches dans des listes non personnelles
        if (!estPersonnel && !req.user.isAdmin) {
            res.status(403).json({ message: "‚õî Acc√®s interdit. Seuls les administrateurs peuvent ajouter des t√¢ches aux listes non personnelles." });
            return;
        }

        await addTache({ tacheLibelle, tacheEtatCompletion, tacheEcheance, tacheCreation, tacheMAJ, listeID, employeMail });
        res.status(201).json({ message: "‚úÖ T√¢che ajout√©e avec succ√®s." });
    } catch (error) {
        next(error);
    }
};

// ‚ùå Supprimer une t√¢che (ADMIN uniquement pour les listes non personnelles)
export const removeTache = async (req: AuthenticatedRequest, res: Response, next: NextFunction): Promise<void> => {
    try {
        if (!req.user) {
            res.status(401).json({ message: "‚õî Acc√®s non autoris√©." });
            return;
        }

        const { id } = req.params;

        // V√©rifier si la t√¢che appartient √† une liste personnelle
        const [taskCheck] = await pool.query<RowDataPacket[]>(
            `SELECT l.estPersonnel FROM tache t
            JOIN liste l ON t.listeID = l.listeID
            WHERE t.tacheID = ?`,
            [id]
        );

        if (taskCheck.length === 0) {
            res.status(404).json({ message: "‚ùå T√¢che introuvable." });
            return;
        }

        const estPersonnel = taskCheck[0].estPersonnel;

        // Seuls les admins peuvent supprimer des t√¢ches dans des listes non personnelles
        if (!estPersonnel && !req.user.isAdmin) {
            res.status(403).json({ message: "‚õî Acc√®s interdit. Seuls les administrateurs peuvent supprimer des t√¢ches des listes non personnelles." });
            return;
        }

        await deleteTache(Number(id));
        res.status(200).json({ message: "‚úÖ T√¢che supprim√©e avec succ√®s." });
    } catch (error) {
        next(error);
    }
};

export const getTachesForUser = async (req: AuthenticatedRequest, res: Response): Promise<void> => {
    try {
        const employeMail = req.user?.employeMail;

        if (!employeMail) {
            res.status(401).json({ message: "Non autoris√©" });
            return;
        }

        console.log("üì© Tache - utilisateur connect√© :", employeMail);

        const taches = await getTachesByEmploye(employeMail);
        res.status(200).json(taches);
    } catch (error) {
        console.error("‚ùå Erreur dans getTachesForUser :", error);
        res.status(500).json({ message: "Erreur serveur", error });
    }
};
